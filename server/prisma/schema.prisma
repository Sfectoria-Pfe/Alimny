// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = "mysql://root:95134505Yy*@localhost:3306/alimny"

}

model Programme {
  id              Int               @id @default(autoincrement())
  name            String            @unique
  description     String
  programmemodule ProgrammeModule[]
  Category        Category          @relation(fields: [categoryId], references: [id])
  categoryId      Int
  session         Session[]
}

model Gouvernorat {
  id    Int    @id @default(autoincrement())
  name  String @unique
  users User[]
}

model CourseContent {
  id          Int           @id @default(autoincrement())
  name        String
  type        TypeContent
  weekcontent WeekContent[]
  Course      Course?       @relation(fields: [courseId], references: [id])
  courseId    Int?
  Questions   Questions?    @relation(fields: [questionsId], references: [id])
  questionsId Int?
}

model Session {
  id             Int              @id @default(autoincrement())
  name           String           @unique
  description    String
  date           DateTime
  sessionstudent SessionStudent[]
  imageUrl       String?          @default("https://media.licdn.com/dms/image/D4E0BAQH8I-kzQdsUXg/company-logo_200_200/0/1698062214267/sfectoria_logo?e=2147483647&v=beta&t=-FocSdGYCvAW7rmL_dPMHj9GYFN11yEm1CM0JwZYdIk")
  sessionteacher SessionTeacher[]
  weeks          Weeks[]
  Programme      Programme        @relation(fields: [programmeId], references: [id])
  programmeId    Int
  Msgs           Msgs[]
  active         Boolean          @default(false)
}

model Category {
  id        Int         @id @default(autoincrement())
  name      String      @unique
  programme Programme[]
}

model SessionStudent {
  id        Int      @id @default(autoincrement())
  Session   Session? @relation(fields: [sessionId], references: [id])
  sessionId Int?
  Student   Student? @relation(fields: [studentId], references: [id])
  studentId Int?
}

model Msgs {
  id        Int     @id @default(autoincrement())
  Session   Session @relation(fields: [sessionId], references: [id])
  sessionId Int
  user      User[]
}

model SessionTeacher {
  id         Int       @id @default(autoincrement())
  Session    Session?  @relation(fields: [sessionId], references: [id])
  sessionId  Int?
  Employee   Employee? @relation(fields: [employeeId], references: [id])
  employeeId Int?
}

model Weeks {
  id          Int           @id @default(autoincrement())
  weekcontent WeekContent[]

  Session   Session @relation(fields: [sessionId], references: [id])
  sessionId Int
}

model ProgrammeModule {
  id Int @id @default(autoincrement())

  Programme   Programme? @relation(fields: [programmeId], references: [id])
  programmeId Int?
  Module      Module?    @relation(fields: [moduleId], references: [id])
  moduleId    Int?

  @@unique(fields: [programmeId, moduleId], name: "programmemodule")
}

model Module {
  id              Int               @id @default(autoincrement())
  name            String            @unique
  description     String
  programmemodule ProgrammeModule[]
  Course          Course            @relation(fields: [courseId], references: [id])
  courseId        Int
}

model WeekContent {
  id              Int            @id @default(autoincrement())
  Weeks           Weeks?         @relation(fields: [weeksId], references: [id])
  weeksId         Int?
  CourseContent   CourseContent? @relation(fields: [courseContentId], references: [id])
  courseContentId Int?
}

model Course {
  id            Int             @id @default(autoincrement())
  name          String
  description   String
  coursecontent CourseContent[]
  module        Module[]
}

model User {
  id            Int          @id @default(autoincrement())
  email         String       @unique
  password      String
  fullName      String
  phone         String
  address       String
  isStudent     Boolean
  imageUrl      String?
  role          Role
  isActive      Boolean      @default(true)
  Msgs          Msgs?        @relation(fields: [msgsId], references: [id])
  msgsId        Int?
  Student       Student?     @relation(fields: [studentId], references: [id])
  studentId     Int?
  Employee      Employee?    @relation(fields: [employeeId], references: [id])
  employeeId    Int?
  aboutMe       String?
  Gouvernorat   Gouvernorat? @relation(fields: [gouvernoratId], references: [id])
  gouvernoratId Int?
   createdAt              DateTime?           @default(now())
  updatedAt              DateTime?           @updatedAt
}

model Employee {
  id             Int              @id @unique
  firstname      String
  LastName       String
  isAdmin        Boolean
  sessionteacher SessionTeacher[]
  user           User[]
}

model Questions {
  id              Int               @id @default(autoincrement())
  correction      String
  coursecontent   CourseContent[]
  studentresponse StudentResponse[]
}

model StudentResponse {
  id          Int        @id @default(autoincrement())
  response    String
  score       Int
  Student     Student?   @relation(fields: [studentId], references: [id])
  studentId   Int?
  Questions   Questions? @relation(fields: [questionsId], references: [id])
  questionsId Int?
}

model StudentBadge {
  id        Int      @id @default(autoincrement())
  fullpack  String
  month     DateTime
  isMonthly Boolean
  Student   Student? @relation(fields: [studentId], references: [id])
  studentId Int?
  Badge     Badge?   @relation(fields: [badgeId], references: [id])
  badgeId   Int?
}

model Badge {
  id           Int            @id @default(autoincrement())
  name         String         @unique
  studentbadge StudentBadge[]
}

model Agenda {
  id    Int      @id @default(autoincrement())
  title String
  start DateTime @default(now())
}

model Student {
  id              Int               @id
  firstname       String
  LastName        String
  isAdmin         Boolean
  sessionstudent  SessionStudent[]
  user            User[]
  studentresponse StudentResponse[]
  studentbadge    StudentBadge[]
}

enum Role {
  admin
  teacher
  manager
  student
}

enum TypeContent {
  pdf
  video
  quiz
  exercice
}
